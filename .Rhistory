#you can provide a custom layout by giving the x-y co-ordinates of each node
layout = rbind(c(-1,-1),
c(1,-1),
c(0,1)))
## Fork-structure
Fork_Adj <- matrix(c(0,0,0,
0,0,0,
1,1,0), 3,3, byrow = TRUE,
dimnames = list(varnames, varnames))
qgraph(Fork_Adj,
layout = rbind(c(-1,-1),
c(1,-1),
c(0,1)))
## Mediator-structure
Mediator_Adj <- matrix(c(0,1,0,
0,0,1,
0,0,0), 3,3, byrow = TRUE,
dimnames = list(varnames, varnames))
qgraph(Mediator_Adj,
layout = rbind(c(-1,-1),
c(1,-1),
c(0,1)))
library(ggdag)
coldag <- dagify(
Z ~ X + Y,
exposure = "X", # the "cause" variable you are interested in
outcome = "Y", # the "effect" variable you are interested in
# optional: give co-ordinates of the variables in the plot
coords = list(x = c(X = -1, Y = 1, Z = 0),
y = c(X = 0, Y = 0, Z = 1))
)
ggdag_status(coldag) + theme_dag()
## Fork-structure with ggdag
forkdag <- dagify(
X + Y ~ Z
exposure = "X"
outcome = "Y"
)
## Fork-structure with ggdag
forkdag <- dagify(
X + Y ~ Z,
exposure = "X",
outcome = "Y"
)
## Fork-structure with ggdag
forkdag <- dagify(
X ~ Z,
Y ~ Z,
exposure = "X",
outcome = "Y",
coords = list(x = c(X = -1, Y = 1, Z = 0),
y = c(X = 0, Y = 0, Z = 1))
)
ggdag_status(forkdag) + theme_dag()
## Mediator-structure with ggdag
meddag <- dagify(
Y ~ X,
Z ~ Y,
exposure = "X",
outcome = "Y",
coords = list(x = c(X = -1, Y = 1, Z = 0),
y = c(X = 0, Y = 0, Z = 1))
)
ggdag_status(meddag) + theme_dag()
## Mediator-structure with ggdag
meddag <- dagify(
Y ~ X,
Z ~ Y,
exposure = "X",
outcome = "Y",
coords = list(x = c(X = -1, Y = 1, Z = 2),
y = c(X = 0, Y = 0, Z = 0))
)
ggdag_status(meddag) + theme_dag()
## Mediator-structure with ggdag
meddag <- dagify(
Y ~ X,
Z ~ Y,
exposure = "X",
outcome = "Y",
coords = list(x = c(X = -1, Y = 1, Z = 3),
y = c(X = 0, Y = 0, Z = 0))
)
ggdag_status(meddag) + theme_dag()
## Mediator-structure with ggdag
meddag <- dagify(
Y ~ X,
Z ~ Y,
exposure = "X",
outcome = "Z",
coords = list(x = c(X = -1, Y = 1, Z = 3),
y = c(X = 0, Y = 0, Z = 0))
)
ggdag_status(meddag) + theme_dag()
eddag <- dagify(
EA ~ CI,
AI ~ CI + EA + U,
Inc ~ EA + CI + AI + U ,
exposure = "EA", # the "cause" variable you are interested in
outcome = "Inc", # the "effect" variable you are interested in
# optional: give co-ordinates of the variables in the plot
coords = list(x = c(EA = -1,CI = 0,AI =0 ,Inc =1 , U = -1),
y = c(EA = 0,CI =1 ,AI = -1,Inc = 0, U = -1))
)
ggdag_status(eddag) + theme_dag()
adjustmentSets(eddag)
library(ggdag)
library(qgraph)
## Part 1: Data and packages
library(tidyverse)
adjustmentSets(eddag)
?adjustmentSets
library(daggity)
install.packages("daggity")
library(daggity)
library(dagitty)
library(dagitty)
adjustmentSets(eddag)
setwd("~/Documents/GitHub/Causal-Inference-SEM")
mdata <- readRDS("mdata.RDS")
View(mdata)
summary(lm(mal ~ income + health + net, data = mdata))
summary(lm(mal ~ Income + health + net, data = mdata))
maldag <- daggify(
mal ~ Income + net,
net ~ Income,
health ~ Income + mal,
exposure = "net",
outcome = "mal"
)
maldag <- dagify(
mal ~ Income + net,
net ~ Income,
health ~ Income + mal,
exposure = "net",
outcome = "mal"
)
ggdag_status(maldag) + theme_dag()
adjustmentSets(maldag)
summary(lm(mal ~ net + Income, data = mdata))
summary(lm(mal ~ Income + health + net, data = mdata))
summary(lm(mal ~ net + Income, data = mdata))
data <- readRDS("ex5_data.RDS")
Adj <- rbind(c(0,0,0,1,0,0,0,0,0),
c(0,0,1,1,0,0,0,0,0),
c(0,0,0,0,0,0,0,1,0),
c(0,0,0,0,1,1,0,0,0),
c(0,0,0,0,0,0,0,0,0),
c(0,0,0,0,0,0,1,1,0),
c(0,0,0,0,0,0,0,0,0),
c(0,0,0,0,0,0,0,0,1),
c(0,0,0,0,0,0,0,0,0))
names <- c("C", "A", "K", "X", "F", "D", "G", "Y", "H")
dimnames(Adj) = list(names,names)
laymat <- matrix(
c(-1,   1,
-.5,   1,
.5,   1,
-.75,   0,
-.75,  -1,
0,   0,
0,  -1,
1,   0,
1,  -1),9,2,byrow = T)
vsize =15; esize = 10; asize = 10
qgraph(Adj,
layout = laymat,
vsize =vsize, esize = esize, asize = asize)
library(CondIndTests)
library(dHSIC)
dhsic.test(data[,"C"], data[,"A"])
CondIndTest(data[,"X"], data[,"G"], data[,"D"])
## Two true conditional independence statements:
## A and F are independent given X
CondIndTest(data[, "A"], data[, "F"], data[, "X"])
## G and Y are independent given D
CondIndTest(data[, "G"], data[, "Y"], data[, "D"]) ## true!
## Two false conditional independence statements:
## G and Y are independent
dhsic.test(data[,"G"], data[,"Y"])
## A and F are independent
dhsic.test(data[,"A"], data[,"F"])
summary(lm(Y ~ X + A))
summary(lm(Y ~ X + A, data = data))
summary(lm(Y ~ X + A, data = as.data.frame(data)))
summary(lm(Y ~ X + K, data = as.data.frame(data)))
datadag <- dagify(
H ~ Y,
F ~ X,
G ~ D,
Y ~ D + K,
K ~ A,
X ~ C + A,
D ~ X,
exposure = "X",
outcome = "Y"
)
ggdag_status(datadag) + theme_dag()
datadag <- dagify(
H ~ Y,
F ~ X,
G ~ D,
Y ~ D + K,
K ~ A,
X ~ C + A,
D ~ X,
exposure = "X",
outcome = "Y",
coords = list(x = c(X = 0, F = 0, D = 1, G = 1, Y = 3, H = 3, A = 0.5, C = -0.5, K = 2),
y = c(X = 1, F = 0, D = 1, G = 0, Y = 1, H = 0, A = 2, C = 2, K = 2))
)
ggdag_status(datadag) + theme_dag()
adjustmentSets(datadag)
adjustmentSets(datadag, type = "all")
scmdag <- dagify(
X ~ Z
Y ~ X + Z
)
scmdag <- dagify(
X ~ Z,
Y ~ X + Z
)
ggdag_status(scmdag) + theme_dag()
scmdag <- dagify(
X ~ Z,
Y ~ X + Z,
exposure = "Z",
outcome = "Y"
)
ggdag_status(scmdag) + theme_dag()
scmdag <- dagify(
X ~ Z,
Y ~ X + Z,
exposure = "Z",
outcome = "Y",
coords = list(x = c(X = 0, Y = 2, Z = 1),
y = c(X = 0, Z = 0, Y = 1))
)
ggdag_status(scmdag) + theme_dag()
scmdag <- dagify(
X ~ Z,
Y ~ X + Z,
exposure = "Z",
outcome = "Y",
coords = list(x = c(X = 0, Y = .5, Z = 1),
y = c(X = 0, Z = 0, Y = .5))
)
ggdag_status(scmdag) + theme_dag()
n <- 1000
Z <- rnorm(n = n, mean = 0, sd = 1)
X <- 2*Z + rnorm(n = n, mean = 0, sd = 1)
Y <- X + 2*Z + rnorm(n = n, mean = 0, sd = 1)
summary(lm(Y ~ X))
summary(lm(Y ~ X + Z))
data <- readRDS("data_cd_ex1.RDS")
View(data)
data <- as.data.frame(readRDS("data_cd_ex1.RDS"))
View(data)
library(ppcor)
library(ppcor)
cor.test(data)
data <- readRDS("data_cd_ex1.RDS")
cor.test(data)
data <- readRDS("data_cd_ex1.RDS")
cor.test(x = data)
cor.test(x = data,y = data)
cor.test(X1, X2, data = data)
cor.test(X1, X2)
?cor.test
cor.test(data$X1, data$X2)
View(data)
data <- readRDS("data_cd_ex1.RDS")
library(ppcor)
cor.test(data$X1, data$X2)
data <- as.data.frame(readRDS("data_cd_ex1.RDS"))
cor.test(data, data$X2)
cor.test(data$X1, data$X2)
cor.test(data$X1, data$X3)
cor.test(data$X1, data$X4)
cor.test(data$X3, data$X4)
cor.test(data$X2, data$X3)
cor.test(data$X2, data$X3)
cor.test(data$X2, data$X4)
cor.test(data$X3, data$X4)
?pcor.test
pcor.test(data$X1, data$X2, data$X3)
pcor.test(data$X1, data$X2, data$X4)
pcor.test(data$X1, data$X3, data$X2)
pcor.test(data$X1, data$X3, data$X4)
pcor.test(data$X1, data$X4, data$X2)
pcor.test(data$X1, data$X4, data$X3)
pcor.test(data$X2, data$X3, data$X1)
pcor.test(data$X2, data$X3, data$X4)
pcor.test(data$X2, data$X3, data$X4)
pcor.test(data$X2, data$X4, data$X1)
pcor.test(data$X2, data$X4, data$X3)
pcor.test(data$X3, data$X4, data$X1)
pcor.test(data$X4, data$X4, data$X2)
pcor.test(data$X3, data$X4, data$X1)
pcor.test(data$X4, data$X4, data$X2)
pcor.test(data$X3, data$X4, data$X2)
pcor(data$X1, data$X2)
pcor(data$X1, data$X3)
pcor(data)
library(tableone)
library(MatchIt)
library(survey)
df <- read.table("SchaferKangData.dat", header = TRUE)
str(df)
t.test(DISTR.2 ~ DIET , data = df)
library(tableone)
library(MatchIt)
library(survey)
df <- read.table("SchaferKangData.dat", header = TRUE)
str(df)
df1 <- df[ which(df$DIET == 1), ]
df0 <- df[ which(df$DIET == 0), ]
(mean(df1$DISTR.1) - mean(df0$DISTR.1))/(sqrt( (var(df1$DISTR.1)+var(df0$DISTR.1))/2 ))
table1 <- CreateTableOne(vars=c("DISTR.1","BLACK", "NBHISP", "GRADE",
"SLFHLTH", "SLFWGHT", "WORKHARD", "GOODQUAL",
"PHYSFIT", "PROUD", "LIKESLF", "ACCEPTED",
"FEELLOVD"), strata="DIET", data=df,
test=FALSE)
print(table1, smd = TRUE)
df$DIET <- as.factor(df$DIET)
library(tableone)
library(MatchIt)
library(survey)
df <- read.table("SchaferKangData.dat", header = TRUE)
str(df)
summary(glm(DISTR.2 ~ DIET + DISTR.1 + BLACK + NBHISP + GRADE + SLFHLTH +
SLFWGHT + WORKHARD + GOODQUAL + PHYSFIT + PROUD +
LIKESELF + ACCEPTED + FEELLOVD))
summary(glm(DISTR.2 ~ DIET + DISTR.1 + BLACK + NBHISP + GRADE + SLFHLTH +
SLFWGHT + WORKHARD + GOODQUAL + PHYSFIT + PROUD +
LIKESELF + ACCEPTED + FEELLOVD, data = df))
summary(glm(DISTR.2 ~ DIET + DISTR.1 + BLACK + NBHISP + GRADE + SLFHLTH +
SLFWGHT + WORKHARD + GOODQUAL + PHYSFIT + PROUD +
LIKESLF + ACCEPTED + FEELLOVD, data = df))
View(df)
df$DIET <- as.factor(df$DIET)
df$BLACK <- as.factor(df$BLACK)
df$NBHISP <- as.factor(df$NBHISP)
df$DIET <- as.factor(df$DIET)
df0 <- subset(df, DIET == 0)
df1 <- subset(df, DIET == 1)
View(df)
str(df0)
M3.0 <- glm(DISTR.2 ~ DIET + DISTR.1 + BLACK + NBHISP + GRADE + SLFHLTH +
SLFWGHT + WORKHARD + GOODQUAL + PHYSFIT + PROUD +
LIKESLF + ACCEPTED + FEELLOVD, data = df0)
M3.0 <- glm(DISTR.2 ~ DIET + DISTR.1 + BLACK + NBHISP + GRADE + SLFHLTH +
SLFWGHT + WORKHARD + GOODQUAL + PHYSFIT + PROUD +
LIKESLF + ACCEPTED + FEELLOVD, data = df0)
M3.1 <- glm(DISTR.2 ~ DIET + DISTR.1 + BLACK + NBHISP + GRADE + SLFHLTH +
SLFWGHT + WORKHARD + GOODQUAL + PHYSFIT + PROUD +
LIKESLF + ACCEPTED + FEELLOVD, data = df1)
View(df0)
M3.0 <- glm(DISTR.2 ~ + DIET + DISTR.1 + BLACK + NBHISP + GRADE + SLFHLTH +
SLFWGHT + WORKHARD + GOODQUAL + PHYSFIT + PROUD +
LIKESLF + ACCEPTED + FEELLOVD, data = df0)
M3.1 <- glm(DISTR.2 ~ + DIET + DISTR.1 + BLACK + NBHISP + GRADE + SLFHLTH +
SLFWGHT + WORKHARD + GOODQUAL + PHYSFIT + PROUD +
LIKESLF + ACCEPTED + FEELLOVD, data = df1)
M3.0 <- glm(DISTR.2 ~ DISTR.1 + BLACK + NBHISP + GRADE + SLFHLTH +
SLFWGHT + WORKHARD + GOODQUAL + PHYSFIT + PROUD +
LIKESLF + ACCEPTED + FEELLOVD, data = df0)
M3.1 <- glm(DISTR.2 ~ DISTR.1 + BLACK + NBHISP + GRADE + SLFHLTH +
SLFWGHT + WORKHARD + GOODQUAL + PHYSFIT + PROUD +
LIKESLF + ACCEPTED + FEELLOVD, data = df1)
# Obtain a prediction for the outcome using all the cases, based on
# the parameter estimates obtained above and saved in M3.1:
M3.est.Y1 <- predict(M3.1, newdata = df)
# Do the same, but now with the parameters saved in M3.0:
M3.est.Y0 <- predict(M3.0, newdata = df)
## Finally, estimate the average causal effect with a paired t.test
t.test(M3.est.Y0, M3.est.Y1, paired = TRUE, alternative = "two.sided")
?predict
M3b.Y0 <- M3.est.Y0
M3b.Y0[df$DIET==0] <- df$DISTR.2[df$DIET==0]
# Do the same for the predicted potential outcome for X=1
M3b.Y1 <- M3.est.Y1
M3b.Y1[df$DIET==1] <- df$DISTR.2[df$DIET==1]
# Now do the t-test with these (observed and predicted) potential outcomes:
t.test(M3b.Y0, M3b.Y1, paired = TRUE, alternative = "two.sided")
logreg <- glm(DIET ~ DISTR.1 + as.factor(BLACK) + as.factor(NBHISP)
+ GRADE + SLFHLTH + SLFWGHT + WORKHARD + GOODQUAL
+ PHYSFIT + PROUD + LIKESLF + ACCEPTED + FEELLOVD,
family = binomial(), data = df)
ps <- predict(logreg, type = "response")
# Run the logistic regression analysis
logreg <- glm(DIET ~ DISTR.1 + as.factor(BLACK) + as.factor(NBHISP)
+ GRADE + SLFHLTH + SLFWGHT + WORKHARD + GOODQUAL
+ PHYSFIT + PROUD + LIKESLF + ACCEPTED + FEELLOVD,
family = binomial(), data = df)
# Obtain a prediction of the probability of treatment (i.e., DIET=1)
ps <- predict(logreg, type = "response")
# Add this predicted probability to the datafile
df$ps <- ps
# Look at the datafile
round(df[1:10,], 2)
# Look at the datafile
round(df[1:10,], 2)
df <- read.table("SchaferKangData.dat", header = TRUE)
# Look at the datafile
round(df[1:10,], 2)
df1 <- df[ which(df$DIET == 1), ]
df0 <- df[ which(df$DIET == 0), ]
# Create histograms, then plot one and add the other:
hist0 <- hist(df0$ps, breaks=30, plot=FALSE)
# Create histograms, then plot one and add the other:
hist0 <- hist(df0$ps, breaks=30, plot=FALSE)
# Add this predicted probability to the datafile
df$ps <- as.numeric(ps)
# Create histograms, then plot one and add the other:
hist0 <- hist(df0$ps, breaks=30, plot=FALSE)
hist1 <- hist(df1$ps, breaks=30, plot=FALSE)
plot( hist0, col=rgb(0,0,1,1/4), xlim=c(0,1),
xlab="Propensity score",
main="Histogram of propensity scores")
plot( hist1, col=rgb(1,0,0,1/4), xlim=c(0,1), add=T)
df1 <- df[ which(df$DIET == 1), ]
df0 <- df[ which(df$DIET == 0), ]
# Create histograms, then plot one and add the other:
hist0 <- hist(df0$ps, breaks=30, plot=FALSE)
hist1 <- hist(df1$ps, breaks=30, plot=FALSE)
plot( hist0, col=rgb(0,0,1,1/4), xlim=c(0,1),
xlab="Propensity score",
main="Histogram of propensity scores")
df1 <- df[ which(df$DIET == 1), ]
df0 <- df[ which(df$DIET == 0), ]
# Create histograms, then plot one and add the other:
hist0 <- hist(df0$ps, breaks=30, plot=FALSE)
hist1 <- hist(df1$ps, breaks=30, plot=FALSE)
plot( hist0, col=rgb(0,0,1,1/4), xlim=c(0,1),
xlab="Propensity score",
main="Histogram of propensity scores")
plot( hist1, col=rgb(1,0,0,1/4), xlim=c(0,1), add=T)
matchdat <- matchit(DIET ~ DISTR.1 + as.factor(BLACK) + as.factor(NBHISP)
+ GRADE + SLFHLTH + SLFWGHT + WORKHARD + GOODQUAL
+ PHYSFIT + PROUD + LIKESLF + ACCEPTED + FEELLOVD,
method = "nearest",  data = df)
matchdat
summary(matchdat)
plot(matchdat,type="jitter")
plot(matchdat,type="hist")
plot(matchdat,type="jitter")
plot(matchdat,type="hist")
## Then t-test!
t.test2 <- t.test(DISTR.2 ~ DIET, df.match)
df.match <- match.data(matchdat)
## Then t-test!
t.test2 <- t.test(DISTR.2 ~ DIET, df.match)
## Then t-test!
t.test(DISTR.2 ~ DIET, df.match)
rm(t.test2)
t.test$estimate[2] - t.test$estimate[1]
## Then t-test!
t.test2 <- t.test(DISTR.2 ~ DIET, df.match)
## And to get the SMD
t.test2$estimate[2] - t.test2$estimate[1]
Y <- df$DISTR.2
X <- df$DIET
mu1hat <- sum( X*Y/ps ) / sum(X/ps)
mu0hat <- sum( (1-X)*Y/(1-ps) ) / sum((1-X)/(1-ps))
mu1hat - mu0hat
## First create 5 strata that each hold 20% of observations
df$stratum <- cut(df$ps,
breaks=c(quantile(df$ps, probs=seq(0,1,0.2))),
labels=seq(1:5),
include.lowest=TRUE)
plot( hist0, col=rgb(0,0,1,1/4), xlim=c(0,1),
xlab="Propensity score", main="Histogram of propensity scores \nwith quantile breaks")
plot( hist1, col=rgb(1,0,0,1/4), xlim=c(0,1), add=T)
br <- c(quantile(df$ps, probs=seq(0,1,0.2)))
abline(v=br[2],col="black",lwd=3)
abline(v=br[3],col="black",lwd=3)
abline(v=br[4],col="black",lwd=3)
abline(v=br[5],col="black",lwd=3)
results <- matrix(,5,1)
results <- matrix("NA",5,1)
for (quintiles in c(1:5)) {
t.test3 <- t.test(DISTR.2 ~ DIET, data = df[which(df$stratum==quintiles),])
print(t.test3)
# Difference in means:
results[quintiles,1] <- t.test3$estimate[2] - t.test3$estimate[1]
}
View(results)
mean(results)
results <- matrix(0,5,1)
for (quintiles in c(1:5)) {
t.test3 <- t.test(DISTR.2 ~ DIET, data = df[which(df$stratum==quintiles),])
print(t.test3)
# Difference in means:
results[quintiles,1] <- t.test3$estimate[2] - t.test3$estimate[1]
}
for (quintiles in c(1:5)) {
t.test3 <- t.test(DISTR.2 ~ DIET, data = df[which(df$stratum==quintiles),])
print(t.test3)
# Difference in means:
results[quintiles,1] <- t.test3$estimate[2] - t.test3$estimate[1]
}
```{r}
mean(results)
results <- matrix(NA,5,1)
for (quintiles in c(1:5)) {
t.test3 <- t.test(DISTR.2 ~ DIET, data = df[which(df$stratum==quintiles),])
print(t.test3)
# Difference in means:
results[quintiles,1] <- t.test3$estimate[2] - t.test3$estimate[1]
}
mean(results)
